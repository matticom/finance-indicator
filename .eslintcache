[{"C:\\Users\\matth\\Desktop\\financeIndi\\src\\index.js":"1","C:\\Users\\matth\\Desktop\\financeIndi\\src\\App.js":"2","C:\\Users\\matth\\Desktop\\financeIndi\\src\\DataFetcher.js":"3","C:\\Users\\matth\\Desktop\\financeIndi\\src\\EmailComponent.jsx":"4","C:\\Users\\matth\\Desktop\\financeIndi\\src\\EmailNotification.js":"5","C:\\Users\\matth\\Desktop\\financeIndi\\src\\DekaEtfChart.jsx":"6","C:\\Users\\matth\\Desktop\\financeIndi\\src\\CryptoChart.jsx":"7","C:\\Users\\matth\\Desktop\\financeIndi\\src\\CryptoParamEvaluation.jsx":"8","C:\\Users\\matth\\Desktop\\financeIndi\\src\\CryptoParamEvaluationService.js":"9"},{"size":203,"mtime":1625148828486,"results":"10","hashOfConfig":"11"},{"size":381,"mtime":1625223194760,"results":"12","hashOfConfig":"11"},{"size":1282,"mtime":1610924649293,"results":"13","hashOfConfig":"11"},{"size":808,"mtime":1625136238062,"results":"14","hashOfConfig":"11"},{"size":372,"mtime":1625132635297,"results":"15","hashOfConfig":"11"},{"size":8392,"mtime":1625149027866,"results":"16","hashOfConfig":"11"},{"size":14274,"mtime":1625751535053,"results":"17","hashOfConfig":"11"},{"size":5945,"mtime":1625222337038,"results":"18","hashOfConfig":"11"},{"size":5566,"mtime":1625734701052,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"a9c91r",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"C:\\Users\\matth\\Desktop\\financeIndi\\src\\index.js",[],[],"C:\\Users\\matth\\Desktop\\financeIndi\\src\\App.js",["46","47"],"import React from 'react';\n\nimport './App.css';\nimport DekaEtfChart from './DekaEtfChart';\nimport CryptoChart from './CryptoChart';\nimport CryptoParamEvaluation from './CryptoParamEvaluation';\n\nfunction App() {\n   return (\n      <div className='App'>\n         <header className='App-header'>\n            <CryptoChart />\n         </header>\n      </div>\n   );\n}\n\nexport default App;\n","C:\\Users\\matth\\Desktop\\financeIndi\\src\\DataFetcher.js",["48","49","50","51","52"],"C:\\Users\\matth\\Desktop\\financeIndi\\src\\EmailComponent.jsx",[],[],"C:\\Users\\matth\\Desktop\\financeIndi\\src\\EmailNotification.js",[],"C:\\Users\\matth\\Desktop\\financeIndi\\src\\DekaEtfChart.jsx",["53","54","55","56","57","58","59","60","61","62","63","64","65","66"],"import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport moment from 'moment';\r\n\r\nconst etfData = require('./data/history.json');\r\n\r\nimport 'chartjs-plugin-annotation';\r\n\r\nimport roundTo from 'round-to';\r\n\r\nconst options = {\r\n   maintainAspectRatio: false,\r\n   legend: {\r\n      position: 'bottom',\r\n      labels: {\r\n         boxWidth: 1,\r\n      },\r\n   },\r\n   scales: {\r\n      yAxes: [\r\n         {\r\n            ticks: {\r\n               beginAtZero: true,\r\n            },\r\n         },\r\n      ],\r\n   },\r\n   elements: {\r\n      point: {\r\n         radius: 0,\r\n         hitRadius: 10,\r\n         hoverRadius: 4,\r\n         hoverBorderWidth: 3,\r\n      },\r\n   },\r\n   chartArea: {\r\n      backgroundColor: 'rgba(0, 0, 0, 0.1)',\r\n   },\r\n   annotation: {\r\n      annotations: [\r\n         {\r\n            drawTime: 'afterDatasetsDraw',\r\n            id: 'hline',\r\n            type: 'line',\r\n            // mode: 'horizontal',\r\n            // scaleID: 'x-axis-0',\r\n            value: '5. Jun 2012',\r\n            borderColor: '#6610f2',\r\n            borderWidth: 1,\r\n            label: {\r\n               backgroundColor: 'rgba(0,0,0, 0.9)',\r\n               content: 'Buy',\r\n               enabled: true,\r\n            },\r\n         },\r\n      ],\r\n   },\r\n};\r\n\r\nfunction getAnnotation(value, label, color, counter) {\r\n   return {\r\n      drawTime: 'afterDatasetsDraw',\r\n      id: `hline-${counter}`,\r\n      type: 'line',\r\n      // mode: 'horizontal',\r\n      scaleID: 'x-axis-0',\r\n      value,\r\n      borderColor: color,\r\n      borderWidth: 1,\r\n      label: {\r\n         backgroundColor: 'rgba(0,0,0, 0.9)',\r\n         content: label,\r\n         enabled: true,\r\n         // yAdjust: Math.random() * 1000 - 500,\r\n      },\r\n   };\r\n}\r\n\r\nfunction getOptionsWithAnnotations(options, annotations) {\r\n   options.annotation = { annotations };\r\n   return options;\r\n}\r\n\r\nconst colors = [\r\n   '#20a8d8',\r\n   '#f8cb00',\r\n   '#e83e8c',\r\n   '#20c997',\r\n   '#6f42c1',\r\n   '#ffc107',\r\n   '#63c2de',\r\n   '#4dbd74',\r\n   '#6610f2',\r\n   '#17a2b8',\r\n   '#f86c6b',\r\n];\r\n\r\nfunction getNewDataSet(data, labelName, color = 'black') {\r\n   return {\r\n      label: labelName,\r\n      backgroundColor: 'rgb(0, 0, 0, 0.1)',\r\n      borderColor: color,\r\n      borderWidth: 2,\r\n      data,\r\n      hidden: false,\r\n      fill: false,\r\n   };\r\n}\r\n\r\nfunction getLabels(data) {\r\n   return data.map((dayData) => {\r\n      const currentDay = dayData.date;\r\n      let label = '';\r\n      const dayDate = moment.unix(currentDay).utc();\r\n      return dayDate.format('D. MMM YYYY');\r\n      // const currentDayString = dayDate.format('DD');\r\n\r\n      // const month = dayDate.clone().startOf('month');\r\n      // const startDayString = month.format('DD');\r\n\r\n      // if (currentDayString === startDayString) {\r\n      //    label = dayDate.format('D. MMM YYYY');\r\n      // }\r\n      // return label;\r\n   });\r\n}\r\n\r\nconst LINE_200 = 200;\r\nconst LINE_100 = 100;\r\n\r\nfunction TestChart() {\r\n   const labels = getLabels(etfData);\r\n   const data = etfData.map((dayData) => {\r\n      const price = dayData.close;\r\n      // return roundTo(+price, 2);\r\n      return price;\r\n   });\r\n\r\n   const dates = labels.map((label) => moment.utc(label));\r\n   console.log('dates :>> ', dates);\r\n   let monthlyDepositAmount = 400;\r\n\r\n   let stockCounts = 0;\r\n   for (let index = 0; index < labels.length; index++) {\r\n      const price = data[index];\r\n      const currentDate = dates[index];\r\n      if (currentDate.year() > 2010 && currentDate.date() === 1) {\r\n         stockCounts += monthlyDepositAmount / price;\r\n      }\r\n   }\r\n   console.log('stockCounts :>> ', stockCounts);\r\n   console.log('total saving :>> ', stockCounts * data[data.length - 1]);\r\n\r\n   monthlyDepositAmount = 320;\r\n   const liquidDepositAmount = 80;\r\n\r\n   let stockCounts2 = 0;\r\n   let summit = 0;\r\n   let currentState = 'normal';\r\n   let cash = 0;\r\n\r\n   for (let index = 0; index < labels.length; index++) {\r\n      const currentDate = dates[index];\r\n      if (currentDate.year() > 2010) {\r\n         const price = data[index];\r\n         if (price === null) console.log('price null :>> ', `${currentDate.format()}`);\r\n\r\n         summit = price >= summit ? price : summit;\r\n         const topUpThreshold60 = 0.4 * summit;\r\n         const soldThreshold20 = 0.8 * summit;\r\n\r\n         if (currentState === 'normal' && price <= topUpThreshold60) {\r\n            console.log('price :>> ', price);\r\n            console.log('summit :>> ', summit);\r\n            console.log('topUpThreshold60 :>> ', topUpThreshold60);\r\n            const extraStocks = cash / price;\r\n            stockCounts2 += extraStocks;\r\n            cash = 0;\r\n            currentState = 'topUp';\r\n            console.log('top up :>> ', `${currentDate.format()}: ${extraStocks}`);\r\n         }\r\n         if (currentState === 'topUp' && price > soldThreshold20) {\r\n            const soldStocks = stockCounts2 * 0.2;\r\n            cash += soldStocks * price;\r\n            stockCounts2 -= soldStocks;\r\n            currentState = 'normal';\r\n            console.log('sell :>> ', `${currentDate.format()}: ${soldStocks}`);\r\n         }\r\n         if (currentDate.date() === 1) {\r\n            stockCounts += monthlyDepositAmount / price;\r\n            cash += liquidDepositAmount;\r\n         }\r\n      }\r\n   }\r\n   console.log('stockCounts2 :>> ', stockCounts2);\r\n   console.log('total saving 2:>> ', stockCounts2 * data[data.length - 1]);\r\n\r\n   const line200 = etfData.map((dayData, idx) => {\r\n      if (idx >= LINE_200) {\r\n         const section200 = etfData.slice(idx - LINE_200, idx);\r\n\r\n         const sum200 = section200.reduce((sum, curr) => (sum += curr.close), 0);\r\n         return sum200 / LINE_200;\r\n      } else {\r\n         return dayData.close;\r\n      }\r\n   });\r\n\r\n   const line200Minus5 = line200.map((value) => {\r\n      return value - (value / 100) * 5;\r\n   });\r\n\r\n   const line200Plus5 = line200.map((value) => {\r\n      return value + (value / 100) * 5;\r\n   });\r\n\r\n   const line100 = etfData.map((dayData, idx) => {\r\n      if (idx >= LINE_100) {\r\n         const section100 = etfData.slice(idx - LINE_100, idx);\r\n\r\n         const sum100 = section100.reduce((sum, curr) => (sum += curr.close), 0);\r\n         return sum100 / LINE_100;\r\n      } else {\r\n         return dayData.close;\r\n      }\r\n   });\r\n\r\n   const indiLine = [];\r\n\r\n   for (let index = 0; index < etfData.length; index++) {\r\n      const dataPoint100 = line100[index];\r\n      const dataPoint200 = line200[index];\r\n      indiLine.push(dataPoint200 + (dataPoint200 - dataPoint100) * 0.5);\r\n   }\r\n\r\n   const annotations = [];\r\n   let lastSoldDiff = 0;\r\n   let lastBuyDiff = 0;\r\n   let counter = 0;\r\n   let lastAction = 'sold';\r\n\r\n   for (let index = 200; index < data.length; index++) {\r\n      const price = data[index];\r\n      // const price200 = line200[index];\r\n      const price200Minus5 = line200Minus5[index];\r\n      const price200Plus5 = line200Plus5[index];\r\n      const label = labels[index];\r\n      const currentSoldDiff = price - price200Minus5;\r\n      const currentBuyDiff = price - price200Plus5;\r\n\r\n      if (lastAction === 'sold' && lastBuyDiff <= 0 && currentBuyDiff > 0) {\r\n         annotations.push(getAnnotation(label, 'Buy', '#6610f2', counter));\r\n         lastSoldDiff = currentSoldDiff;\r\n         lastBuyDiff = currentBuyDiff;\r\n         lastAction = 'buy';\r\n      }\r\n      // console.log('lastSoldDiff :>> ', lastSoldDiff);\r\n      // console.log('currentSoldDiff :>> ', currentSoldDiff);\r\n\r\n      if (lastAction === 'buy' && lastSoldDiff > 0 && currentSoldDiff <= 0) {\r\n         annotations.push(getAnnotation(label, 'Sold', '#4dbd74', counter));\r\n         lastSoldDiff = currentSoldDiff;\r\n         lastBuyDiff = currentBuyDiff;\r\n         lastAction = 'sold';\r\n      }\r\n      counter++;\r\n   }\r\n   // console.log('annotations :>> ', annotations);\r\n\r\n   const chartData = {\r\n      labels,\r\n      datasets: [\r\n         getNewDataSet(data, 'EL4C.DE'),\r\n         // getNewDataSet(line200, 'EL4C.DE (200)', 'rgba(245, 0, 160, 1)'),\r\n         // getNewDataSet(line200Minus5, 'EL4C.DE (200 - 5%)', '#ffc107'),\r\n         // getNewDataSet(line200Plus5, 'EL4C.DE (200 + 5%)', '#20c997'),\r\n         // getNewDataSet(line100, 'EL4C.DE (100)', '#ffc107'),\r\n         // getNewDataSet(indiLine, 'EL4C.DE (ext)', '#20c997'),\r\n      ],\r\n   };\r\n\r\n   return <Line data={chartData} options={getOptionsWithAnnotations(options, annotations)} height={300} />;\r\n}\r\n\r\nexport default TestChart;\r\n","C:\\Users\\matth\\Desktop\\financeIndi\\src\\CryptoChart.jsx",["67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport moment from 'moment';\r\n\r\n// const rawData = require('./data/historyLink.json');\r\n// const rawData = require('./data/historyBTC.json');\r\nconst rawData = require('./data/LongHistoryBTC.json');\r\nimport Plot from 'react-plotly.js';\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\n\r\nimport 'chartjs-plugin-annotation';\r\n\r\nimport roundTo from 'round-to';\r\nimport numeral from 'numeral';\r\n\r\nimport CryptoParamEvaluation from './CryptoParamEvaluation';\r\nimport { evaluateParams } from './CryptoParamEvaluationService';\r\n\r\nfunction addHiddenKeyColumn(rows) {\r\n   return rows.map((row, idx) => ({ ...row, hiddenKey: idx }));\r\n}\r\n\r\nconst columns = [\r\n   {\r\n      text: 'hiddenKey',\r\n      dataField: 'hiddenKey',\r\n      hidden: 'true',\r\n   },\r\n   {\r\n      text: 'Balance',\r\n      dataField: 'savings',\r\n      formatter: (value) => numeral(value).format('0,0.000a'),\r\n   },\r\n   {\r\n      text: 'X days line',\r\n      dataField: 'days',\r\n   },\r\n   {\r\n      text: 'Tolerance',\r\n      dataField: 'tolerance',\r\n   },\r\n   {\r\n      text: 'Transactions',\r\n      dataField: 'transactions',\r\n   },\r\n];\r\n\r\nconst getOptions = () => ({\r\n   maintainAspectRatio: false,\r\n   legend: {\r\n      position: 'bottom',\r\n      labels: {\r\n         boxWidth: 1,\r\n      },\r\n   },\r\n   scales: {\r\n      yAxes: [\r\n         {\r\n            ticks: {\r\n               beginAtZero: true,\r\n            },\r\n         },\r\n      ],\r\n   },\r\n   elements: {\r\n      point: {\r\n         radius: 0,\r\n         hitRadius: 10,\r\n         hoverRadius: 4,\r\n         hoverBorderWidth: 3,\r\n      },\r\n   },\r\n   chartArea: {\r\n      backgroundColor: 'rgba(0, 0, 0, 0.1)',\r\n   },\r\n   annotation: {\r\n      annotations: [\r\n         {\r\n            drawTime: 'afterDatasetsDraw',\r\n            id: 'hline',\r\n            type: 'line',\r\n            // mode: 'horizontal',\r\n            // scaleID: 'x-axis-0',\r\n            value: '5. Jun 2012',\r\n            borderColor: '#6610f2',\r\n            borderWidth: 1,\r\n            label: {\r\n               backgroundColor: 'rgba(0,0,0, 0.9)',\r\n               content: 'Buy',\r\n               enabled: true,\r\n            },\r\n         },\r\n      ],\r\n   },\r\n});\r\n\r\nfunction getAnnotation(value, label, color, counter) {\r\n   return {\r\n      drawTime: 'afterDatasetsDraw',\r\n      id: `hline-${counter}`,\r\n      type: 'line',\r\n      // mode: 'horizontal',\r\n      scaleID: 'x-axis-0',\r\n      value,\r\n      borderColor: color,\r\n      borderWidth: 1,\r\n      label: {\r\n         backgroundColor: 'rgba(0,0,0, 0.9)',\r\n         content: label,\r\n         enabled: true,\r\n         yAdjust: 50,\r\n      },\r\n   };\r\n}\r\n\r\nfunction getOptionsWithAnnotations(options, annotations) {\r\n   options.annotation = { annotations };\r\n   return options;\r\n}\r\n\r\nconst colors = [\r\n   '#20a8d8',\r\n   '#f8cb00',\r\n   '#e83e8c',\r\n   '#20c997',\r\n   '#6f42c1',\r\n   '#ffc107',\r\n   '#63c2de',\r\n   '#4dbd74',\r\n   '#6610f2',\r\n   '#17a2b8',\r\n   '#f86c6b',\r\n];\r\n\r\nfunction getNewDataSet(data, labelName, color = 'black') {\r\n   return {\r\n      label: labelName,\r\n      backgroundColor: 'rgb(0, 0, 0, 0.1)',\r\n      borderColor: color,\r\n      borderWidth: 2,\r\n      data,\r\n      hidden: false,\r\n      fill: false,\r\n   };\r\n}\r\n\r\nfunction getLabels(data) {\r\n   return data.map((dayData) => {\r\n      const currentDay = dayData.date;\r\n      const dayDate = moment.unix(currentDay);\r\n      return dayDate.format('D. MMM YYYY');\r\n   });\r\n}\r\n\r\nconst LINE_200 = 200;\r\nconst LINE_100 = 100;\r\n// const LINE_X = 12;\r\n// const TOLERANCE = 4;\r\n\r\n// ChainLink:\r\n// 50d/10% => 12.2k\r\n// 30d/10% => 24.3k\r\n// 30d/5% => 50.4k\r\n// 20d/6% => 48.4k\r\n\r\n// Bitcoin:\r\n// 50d/10% => 15.2k\r\n// 30d/10% => 7.3k\r\n// 30d/5% => 7.7k\r\n// 20d/6% => 5.2k\r\n// 100d/10% => 5.9k\r\n// 40d/10% => 7.5k\r\n// 40d/15% => 8.5k\r\n// 45d/12% => 12.6k\r\n// 60d/10% => 13.7k\r\n// 60d/5% => 16.0k\r\n// 40d/5% => 11.8k\r\n\r\nconst start = 0;\r\n\r\nfunction TestChart() {\r\n   // const globalStart = moment('2016-09-05').unix();\r\n\r\n   const [done, setDone] = useState(false);\r\n   const [counter, setCounter] = useState(false);\r\n   const [chart3d, setChart3d] = useState(false);\r\n\r\n   const workerRef = useRef(null);\r\n\r\n   const runWorker = (rawData, start) => {\r\n      const worker = new window.Worker('./worker.js');\r\n\r\n      worker.postMessage({\r\n         type: 'start',\r\n         data: rawData,\r\n         start,\r\n      });\r\n      //\r\n      worker.onerror = (err) => err;\r\n      worker.onmessage = (event) => {\r\n         const { chart3d: newChart3d, counter: newCounter } = event.data;\r\n         console.log('chart3d :>> ', JSON.stringify(newChart3d));\r\n         setChart3d(newChart3d);\r\n         setCounter(newCounter);\r\n         setDone(true);\r\n         worker.terminate();\r\n      };\r\n      workerRef.current = worker;\r\n   };\r\n\r\n   const stopWorker = () => {\r\n      workerRef.current.terminate();\r\n   };\r\n\r\n   // useEffect(() => {\r\n   //    workerRef.current = new Worker('worker.js');\r\n   //    workerRef.current.addEventListener('message', (event) => {\r\n   //       const { chart3d: newChart3d, counter: newCounter } = event.data;\r\n   //       setChart3d(newChart3d);\r\n   //       setCounter(newCounter);\r\n   //       setDone(true);\r\n   //    });\r\n   // }, []);\r\n\r\n   // const globalStart = moment('2020-05-22').unix();\r\n   // const globalEnd = moment('2021-05-17').unix();\r\n   // console.time('first');\r\n   // const globalData = getResult(rawData, globalStart, undefined);\r\n   // console.timeEnd('first');\r\n\r\n   // const evaStart = moment('2016-09-05').unix();\r\n   // const evaStart = moment('2020-05-22').unix();\r\n   // const evaEnd = moment('2021-01-31').unix();\r\n   // const evaData = getResult(rawData, evaStart, undefined, globalData);\r\n\r\n   return (\r\n      <>\r\n         {done ? (\r\n            <>\r\n               <div style={{ fontSize: '26px', margin: '20px 0px' }}>{`Counter ${counter}/${\r\n                  rawData.length - start - 200\r\n               }`}</div>\r\n               <div style={{ width: '50%' }}>\r\n                  <Plot data={[{ z: chart3d, type: 'surface' }]} />\r\n               </div>\r\n            </>\r\n         ) : (\r\n            <>\r\n               <button onClick={() => runWorker(rawData, start)}>Start</button>\r\n               <button\r\n                  onClick={() => {\r\n                     stopWorker();\r\n                  }}\r\n               >\r\n                  Stop\r\n               </button>\r\n            </>\r\n         )}\r\n      </>\r\n\r\n      // <>\r\n      //    <div\r\n      //       style={{ fontSize: '26px', margin: '20px 0px' }}\r\n      //    >{`Optimum data evaluation (entire plot data ${moment.unix(globalStart).format('DD.MM.YYYY')} - ${moment\r\n      //       .unix(globalEnd)\r\n      //       .format('DD.MM.YYYY')}):`}</div>\r\n      //    <div\r\n      //       style={{\r\n      //          display: 'flex',\r\n      //          justifyContent: 'space-around',\r\n      //          width: '25%',\r\n      //          margin: '20px 0px',\r\n      //          fontSize: '16px',\r\n      //       }}\r\n      //    >\r\n      //       <div>{`Balance: ${numeral(globalData.topX[0].savings).format('0,0.000a')}`}</div>\r\n      //       <div>{`Transactions: ${globalData.topX[0].transactions}`}</div>\r\n      //       <div>{`Days line: ${globalData.topX[0].days}`}</div>\r\n      //       <div>{`Tolerance: ${globalData.topX[0].tolerance}`}</div>\r\n      //    </div>\r\n      //    <div style={{ position: 'relative', height: '600px', width: '100%' }}>\r\n      //       <Line\r\n      //          data={globalData.chartData}\r\n      //          options={getOptionsWithAnnotations(getOptions(), globalData.annotations)}\r\n      //       />\r\n      //    </div>\r\n      //    <div style={{ fontSize: '26px', margin: '20px 0px' }}>{`Evaluated data (${moment\r\n      //       .unix(evaStart)\r\n      //       .format('DD.MM.YYYY')} - ${moment.unix(evaEnd).format('DD.MM.YYYY')}):`}</div>\r\n      //    <div\r\n      //       style={{\r\n      //          display: 'flex',\r\n      //          justifyContent: 'space-around',\r\n      //          width: '25%',\r\n      //          margin: '20px 0px',\r\n      //          fontSize: '16px',\r\n      //       }}\r\n      //    >\r\n      //       <div>{`Balance: ${numeral(evaData.topX[0].savings).format('0,0.000a')}`}</div>\r\n      //       <div>{`Transactions: ${evaData.topX[0].transactions}`}</div>\r\n      //       <div>{`Days line: ${evaData.topX[0].days}`}</div>\r\n      //       <div>{`Tolerance: ${evaData.topX[0].tolerance}`}</div>\r\n      //    </div>\r\n      //    <div style={{ position: 'relative', height: '600px', width: '100%' }}>\r\n      //       <Line data={evaData.chartData} options={getOptionsWithAnnotations(getOptions(), evaData.annotations)} />\r\n      //    </div>\r\n      //    <div style={{ position: 'relative', width: '100%' }}>\r\n      //       <div style={{ fontSize: '26px', margin: '20px 0px' }}>Evaluation</div>\r\n      //       <div style={{ display: 'flex' }}>\r\n      //          <div style={{ width: '50%' }}>\r\n      //             {evaStart !== undefined && (\r\n      //                <div style={{ fontSize: '16px', margin: '20px 0px' }}>\r\n      //                   <div>{`Evalution start: ${moment.unix(evaStart).format('DD.MM.YYYY')}`}</div>\r\n      //                   <div>{`Evalution end: ${moment.unix(evaEnd).format('DD.MM.YYYY')}`}</div>\r\n      //                </div>\r\n      //             )}\r\n      //             <Plot data={[{ z: evaData.chart3dData, type: 'surface' }]} />\r\n      //          </div>\r\n      //          <div style={{ width: '50%', fontSize: '14px', display: 'flex', justifyContent: 'center' }}>\r\n      //             <BootstrapTable\r\n      //                keyField='hiddenKey'\r\n      //                data={addHiddenKeyColumn(evaData.topX)}\r\n      //                columns={columns}\r\n      //                bodyClasses='table-wrap-word'\r\n      //                classes='fixed-table'\r\n      //                bootstrap4\r\n      //                striped\r\n      //                hover\r\n      //             />\r\n      //          </div>\r\n      //       </div>\r\n      //    </div>\r\n      // </>\r\n   );\r\n}\r\n\r\nfunction getResult(rawData, start, end, global) {\r\n   const { chart3dData, topX, data, labels } = evaluateParams([...rawData], start, end);\r\n\r\n   const { savings, days, tolerance, transactions } = topX[0];\r\n\r\n   const { xDayLine: lineX, plusLimit: lineXPlus, minusLimit: lineXMinus } = getXDayLineData(days, data, tolerance);\r\n   const globalLines = global ? getXDayLineData(days, global.plotData, tolerance) : null;\r\n   const { annotations, lastSold } = setBuySellSignals(days, labels, data, lineXMinus, lineXPlus);\r\n   // console.log('annotations :>> ', annotations);\r\n   // console.log('line200 :>> ', line200);\r\n\r\n   if (global) {\r\n      // console.log('labels[labels.length - 1] :>> ', labels[labels.length - 1]);\r\n      annotations.push(getAnnotation(labels[labels.length - 1], 'End', '#ffc107', 9999));\r\n   }\r\n   const chartData = {\r\n      labels: global ? global.plotLabels : labels,\r\n      datasets: [\r\n         getNewDataSet(global ? global.plotData : data, 'Currency'),\r\n         getNewDataSet(global ? globalLines.minusLimit : lineXMinus, `- ${tolerance}%`, '#6610f2'),\r\n         getNewDataSet(global ? globalLines.plusLimit : lineXPlus, `+ ${tolerance}%`, '#f86c6b'),\r\n         getNewDataSet(global ? global.plotData : lineX, `${days} days`, '#20c997'),\r\n      ],\r\n   };\r\n\r\n   return { chartData, chart3dData, annotations, topX, plotData: data, plotLabels: labels };\r\n}\r\n\r\nfunction getXDayLineData(days, data, tolerance) {\r\n   const xDayLine = data.map((dayData, idx) => {\r\n      if (idx >= days) {\r\n         const sectionXdays = data.slice(idx - days, idx);\r\n\r\n         const sumXdays = sectionXdays.reduce((sum, curr) => (sum += curr), 0);\r\n         return sumXdays / days;\r\n      } else {\r\n         return dayData;\r\n      }\r\n   });\r\n\r\n   const xDayLineMinus = xDayLine.map((value) => {\r\n      return value - (value / 100) * tolerance;\r\n   });\r\n\r\n   const xDayLinePlus = xDayLine.map((value) => {\r\n      return value + (value / 100) * tolerance;\r\n   });\r\n   return { xDayLine, plusLimit: xDayLinePlus, minusLimit: xDayLineMinus };\r\n}\r\n\r\nfunction setBuySellSignals(days, labels, lineData, lineDataMinus5, lineDataPlus5) {\r\n   const annotations = [];\r\n\r\n   const INITIAL_MONEY = 1000;\r\n   let pieces = 0;\r\n   let currentMoney = INITIAL_MONEY;\r\n   let transactionCount = 0;\r\n\r\n   let lastSoldDiff = 0;\r\n   let lastBuyDiff = 0;\r\n   let counter = 0;\r\n   let lastAction = 'sold';\r\n\r\n   let lastSold = { savings: INITIAL_MONEY, date: labels[0] };\r\n   // console.log('labels :>> ', labels);\r\n   // console.log('lineData :>> ', lineData);\r\n\r\n   for (let index = days; index < lineData.length; index++) {\r\n      const price = lineData[index];\r\n      const priceMinus5 = lineDataMinus5[index];\r\n      const pricePlus5 = lineDataPlus5[index];\r\n      const label = labels[index];\r\n      const currentSoldDiff = price - priceMinus5;\r\n      const currentBuyDiff = price - pricePlus5;\r\n\r\n      if (lastAction === 'sold' && lastBuyDiff <= 0 && currentBuyDiff > 0) {\r\n         annotations.push(getAnnotation(label, 'Buy', '#6610f2', counter));\r\n         lastSoldDiff = currentSoldDiff;\r\n         lastBuyDiff = currentBuyDiff;\r\n         lastAction = 'buy';\r\n\r\n         pieces = currentMoney / price;\r\n         currentMoney = 0;\r\n         // console.log(`BUY :>> ${label} (pieces: ${pieces} / price: ${price})`);\r\n         transactionCount++;\r\n      }\r\n      // console.log('lastSoldDiff :>> ', lastSoldDiff);\r\n      // console.log('currentSoldDiff :>> ', currentSoldDiff);\r\n\r\n      if (lastAction === 'buy' && lastSoldDiff > 0 && currentSoldDiff <= 0) {\r\n         annotations.push(getAnnotation(label, 'Sold', '#4dbd74', counter));\r\n         lastSoldDiff = currentSoldDiff;\r\n         lastBuyDiff = currentBuyDiff;\r\n         lastAction = 'sold';\r\n\r\n         currentMoney = price * pieces;\r\n         pieces = 0;\r\n         // console.log(`SOLD :>> ${label} (savings: ${currentMoney} / price: ${price})`);\r\n         transactionCount++;\r\n         lastSold = { savings: currentMoney, date: label, transactions: transactionCount };\r\n      }\r\n      counter++;\r\n   }\r\n   return { annotations, lastSold };\r\n}\r\n\r\nexport default TestChart;\r\n","C:\\Users\\matth\\Desktop\\financeIndi\\src\\CryptoParamEvaluation.jsx",["85","86","87","88","89"],"import React from 'react';\r\nimport moment from 'moment';\r\nimport Plot from 'react-plotly.js';\r\n\r\n// const rawData = require('./data/historyLink.json');\r\n// const rawData = require('./data/historyBTC.json');\r\nconst rawData = require('./data/LongHistoryBTC.json');\r\n\r\nfunction getLabels(data) {\r\n   return data.map((dayData) => {\r\n      const currentDay = dayData.date;\r\n      const dayDate = moment.unix(currentDay).utc();\r\n      return dayDate.format('D. MMM YYYY');\r\n   });\r\n}\r\n\r\n// ChainLink:\r\n// 50d/10% => 12.2k\r\n// 30d/10% => 24.3k\r\n// 30d/5% => 50.4k\r\n// 20d/6% => 48.4k\r\n\r\n// Bitcoin:\r\n// 50d/10% => 15.2k\r\n// 30d/10% => 7.3k\r\n// 30d/5% => 7.7k\r\n// 20d/6% => 5.2k\r\n// 100d/10% => 5.9k\r\n// 40d/10% => 7.5k\r\n// 40d/15% => 8.5k\r\n// 45d/12% => 12.6k\r\n// 60d/10% => 13.7k\r\n// 60d/5% => 16.0k\r\n// 40d/5% => 11.8k\r\n\r\nfunction TestChart() {\r\n   const start = moment('2016-09-05').unix();\r\n   const end = moment('2017-11-25').unix();\r\n\r\n   const sourceData = rawData.filter((data) => data.date > start && data.date < end);\r\n   // const sourceData = rawData.slice(Math.round((rawData.length / 3) * 2));\r\n   // const sourceData = rawData;\r\n\r\n   const labels = getLabels(sourceData);\r\n   const data = sourceData.map((dayData) => {\r\n      const price = dayData.value;\r\n      // return roundTo(+price, 2);\r\n      return price;\r\n   });\r\n\r\n   const result = [];\r\n   let top10 = [];\r\n\r\n   const daysParams = [];\r\n   for (let days = 1; days <= 200; days++) {\r\n      daysParams.push(days);\r\n   }\r\n\r\n   const toleranceParams = [];\r\n   for (let tolerance = 1; tolerance <= 40; tolerance++) {\r\n      toleranceParams.push(tolerance);\r\n   }\r\n\r\n   daysParams.forEach((daysParam) => {\r\n      const tolerancesRes = [];\r\n      toleranceParams.forEach((toleranceParam) => {\r\n         const { xDayLine: lineX, plusLimit: lineXPlus, minusLimit: lineXMinus } = getXDayLineData(\r\n            daysParam,\r\n            data,\r\n            toleranceParam,\r\n         );\r\n         const { savings, date, transactions } = calcProfit(daysParam, labels, data, lineXMinus, lineXPlus);\r\n         tolerancesRes.push(savings);\r\n         top10.push({ savings, days: daysParam, tolerance: toleranceParam, transactions });\r\n      });\r\n      result.push(tolerancesRes);\r\n   });\r\n\r\n   top10.sort((a, b) => b.savings - a.savings);\r\n   console.log('top25 :>> ', top10.slice(0, 25));\r\n\r\n   console.log('result :>> ', result);\r\n   // const dates = labels.map((label) => moment.utc(label));\r\n   // console.log('dates :>> ', dates);\r\n\r\n   // const indiLine = [];\r\n\r\n   // for (let index = 0; index < sourceData.length; index++) {\r\n   //    const dataPoint100 = line100[index];\r\n   //    const dataPoint200 = line200[index];\r\n   //    indiLine.push(dataPoint200 + (dataPoint200 - dataPoint100) * 0.5);\r\n   // }\r\n\r\n   // console.log('annotations :>> ', annotations);\r\n   // console.log('line200 :>> ', line200);\r\n   // const chartData = {\r\n   //    labels,\r\n   //    datasets: [\r\n   //       getNewDataSet(data, 'ChainLink'),\r\n   //       // getNewDataSet(line200, '200 days', 'rgba(245, 0, 160, 1)'),\r\n   //       getNewDataSet(lineXMinus, `- ${TOLERANCE}%`, '#6610f2'),\r\n   //       getNewDataSet(lineXPlus, `+ ${TOLERANCE}%`, '#f86c6b'),\r\n   //       // getNewDataSet(line100, '100 days', '#ffc107'),\r\n   //       getNewDataSet(lineX, `30${LINE_X} days`, '#20c997'),\r\n   //       // getNewDataSet(indiLine, 'EL4C.DE (ext)', '#20c997'),\r\n   //    ],\r\n   // };\r\n\r\n   // return <div>Test</div>;\r\n   return <Plot data={[{ z: result, type: 'surface' }]} />;\r\n}\r\n\r\nfunction getXDayLineData(days, data, tolerance) {\r\n   const xDayLine = data.map((dayData, idx) => {\r\n      if (idx >= days) {\r\n         const sectionXdays = data.slice(idx - days, idx);\r\n\r\n         const sumXdays = sectionXdays.reduce((sum, curr) => (sum += curr), 0);\r\n         return sumXdays / days;\r\n      } else {\r\n         return dayData;\r\n      }\r\n   });\r\n\r\n   const xDayLineMinus = xDayLine.map((value) => {\r\n      return value - (value / 100) * tolerance;\r\n   });\r\n\r\n   const xDayLinePlus = xDayLine.map((value) => {\r\n      return value + (value / 100) * tolerance;\r\n   });\r\n   return { xDayLine, plusLimit: xDayLinePlus, minusLimit: xDayLineMinus };\r\n}\r\n\r\nfunction calcProfit(days, labels, lineData, lineDataMinus, lineDataPlus) {\r\n   const INITIAL_MONEY = 1000;\r\n   let pieces = 0;\r\n   let currentMoney = INITIAL_MONEY;\r\n   let transactionCount = 0;\r\n\r\n   let lastSoldDiff = 0;\r\n   let lastBuyDiff = 0;\r\n   let counter = 0;\r\n   let lastAction = 'sold';\r\n\r\n   let lastSold = { savings: INITIAL_MONEY, date: labels[0] };\r\n\r\n   for (let index = days; index < lineData.length; index++) {\r\n      const price = lineData[index];\r\n      const priceMinus5 = lineDataMinus[index];\r\n      const pricePlus5 = lineDataPlus[index];\r\n      const label = labels[index];\r\n      const currentSoldDiff = price - priceMinus5;\r\n      const currentBuyDiff = price - pricePlus5;\r\n\r\n      if (lastAction === 'sold' && lastBuyDiff <= 0 && currentBuyDiff > 0) {\r\n         lastSoldDiff = currentSoldDiff;\r\n         lastBuyDiff = currentBuyDiff;\r\n         lastAction = 'buy';\r\n\r\n         pieces = currentMoney / price;\r\n         currentMoney = 0;\r\n         transactionCount++;\r\n         // console.log(`BUY :>> ${label} (pieces: ${pieces} / price: ${price})`);\r\n      }\r\n      // console.log('lastSoldDiff :>> ', lastSoldDiff);\r\n      // console.log('currentSoldDiff :>> ', currentSoldDiff);\r\n\r\n      if (lastAction === 'buy' && lastSoldDiff > 0 && currentSoldDiff <= 0) {\r\n         lastSoldDiff = currentSoldDiff;\r\n         lastBuyDiff = currentBuyDiff;\r\n         lastAction = 'sold';\r\n\r\n         currentMoney = price * pieces;\r\n         pieces = 0;\r\n         // console.log(`SOLD :>> ${label} (savings: ${currentMoney} / price: ${price})`);\r\n         transactionCount++;\r\n         lastSold = { savings: currentMoney, date: label, transactions: transactionCount };\r\n      }\r\n      counter++;\r\n   }\r\n   return lastSold;\r\n}\r\n\r\nexport default TestChart;\r\n","C:\\Users\\matth\\Desktop\\financeIndi\\src\\CryptoParamEvaluationService.js",["90","91","92"],"import moment from 'moment';\r\n\r\n// const rawData = require('./data/historyLink.json');\r\n// const rawData = require('./data/historyBTC.json');\r\n// const rawData = require('./data/LongHistoryBTC.json');\r\n\r\nfunction getLabels(data) {\r\n   return data.map((dayData) => {\r\n      const currentDay = dayData.date;\r\n      const dayDate = moment.unix(currentDay);\r\n      return dayDate.format('D. MMM YYYY');\r\n   });\r\n}\r\n\r\n// ChainLink:\r\n// 50d/10% => 12.2k\r\n// 30d/10% => 24.3k\r\n// 30d/5% => 50.4k\r\n// 20d/6% => 48.4k\r\n\r\n// Bitcoin:\r\n// 50d/10% => 15.2k\r\n// 30d/10% => 7.3k\r\n// 30d/5% => 7.7k\r\n// 20d/6% => 5.2k\r\n// 100d/10% => 5.9k\r\n// 40d/10% => 7.5k\r\n// 40d/15% => 8.5k\r\n// 45d/12% => 12.6k\r\n// 60d/10% => 13.7k\r\n// 60d/5% => 16.0k\r\n// 40d/5% => 11.8k\r\n\r\nconst MIN_TOLERANCE = 3;\r\nconst MAX_TOLERANCE = 30;\r\nconst MIN_DAYS = 1;\r\nconst MAX_DAYS = 150;\r\n\r\nexport function evaluateParams(rawData, start, end) {\r\n   let sourceData = rawData;\r\n   if (start !== undefined) {\r\n      if (end !== undefined) {\r\n         sourceData = rawData.filter((data) => data.date >= start && data.date <= end);\r\n      } else {\r\n         end = rawData[rawData.length - 1].date;\r\n         sourceData = rawData.filter((data) => data.date >= start);\r\n      }\r\n   }\r\n   // const sourceData = rawData.slice(Math.round((rawData.length / 3) * 2));\r\n   // const sourceData = rawData;\r\n\r\n   const labels = getLabels(sourceData);\r\n   const data = sourceData.map((dayData) => {\r\n      const price = dayData.value;\r\n      return price;\r\n   });\r\n\r\n   const result = [];\r\n   const top10 = [];\r\n\r\n   const daysParams = [];\r\n   for (let days = MIN_DAYS; days <= MAX_DAYS; days++) {\r\n      daysParams.push(days);\r\n   }\r\n\r\n   const toleranceParams = [];\r\n   for (let tolerance = MIN_TOLERANCE; tolerance <= MAX_TOLERANCE; tolerance++) {\r\n      toleranceParams.push(tolerance);\r\n   }\r\n\r\n   daysParams.forEach((daysParam) => {\r\n      const tolerancesRes = [];\r\n      toleranceParams.forEach((toleranceParam) => {\r\n         const { xDayLine: lineX, plusLimit: lineXPlus, minusLimit: lineXMinus } = getXDayLineData(\r\n            daysParam,\r\n            data,\r\n            toleranceParam,\r\n         );\r\n         const { savings, date, transactions } = calcProfit(daysParam, labels, data, lineXMinus, lineXPlus);\r\n         tolerancesRes.push(savings);\r\n         top10.push({ savings, days: daysParam, tolerance: toleranceParam, transactions });\r\n      });\r\n      result.push(tolerancesRes);\r\n   });\r\n   // console.log('top10 :>> ', top10);\r\n   const timeRangeInDays = start !== undefined && end !== undefined ? (end - start) / 3600 / 24 : rawData.length;\r\n   const maxTransactionsPerDay = 12 / 365; // 12 transaction/year\r\n   const maxTransactions = timeRangeInDays * maxTransactionsPerDay;\r\n   let filteredTop10 = top10.filter((entry) => entry.transactions < maxTransactions);\r\n   // console.log('filteredTop10 :>> ', filteredTop10);\r\n   filteredTop10.sort((a, b) => b.savings - a.savings);\r\n   filteredTop10 = filteredTop10.slice(0, 25);\r\n   // console.log('top25 :>> ', filteredTop10);\r\n\r\n   return { chart3dData: result, topX: filteredTop10, data, labels };\r\n   // console.log('result :>> ', result);\r\n}\r\n\r\nfunction getXDayLineData(days, data, tolerance) {\r\n   const xDayLine = data.map((dayData, idx) => {\r\n      if (idx >= days) {\r\n         const sectionXdays = data.slice(idx - days, idx);\r\n\r\n         const sumXdays = sectionXdays.reduce((sum, curr) => (sum += curr), 0);\r\n         return sumXdays / days;\r\n      } else {\r\n         return dayData;\r\n      }\r\n   });\r\n\r\n   const xDayLineMinus = xDayLine.map((value) => {\r\n      return value - (value / 100) * tolerance;\r\n   });\r\n\r\n   const xDayLinePlus = xDayLine.map((value) => {\r\n      return value + (value / 100) * tolerance;\r\n   });\r\n   return { xDayLine, plusLimit: xDayLinePlus, minusLimit: xDayLineMinus };\r\n}\r\n\r\nfunction calcProfit(days, labels, lineData, lineDataMinus, lineDataPlus) {\r\n   const INITIAL_MONEY = 1000;\r\n   let pieces = 0;\r\n   let currentMoney = INITIAL_MONEY;\r\n   let transactionCount = 0;\r\n\r\n   let lastSoldDiff = 0;\r\n   let lastBuyDiff = 0;\r\n   let counter = 0;\r\n   let lastAction = 'sold';\r\n\r\n   let lastSold = { savings: INITIAL_MONEY, date: labels[0] };\r\n\r\n   for (let index = days; index < lineData.length; index++) {\r\n      const price = lineData[index];\r\n      const priceMinus5 = lineDataMinus[index];\r\n      const pricePlus5 = lineDataPlus[index];\r\n      const label = labels[index];\r\n      const currentSoldDiff = price - priceMinus5;\r\n      const currentBuyDiff = price - pricePlus5;\r\n\r\n      if (lastAction === 'sold' && lastBuyDiff <= 0 && currentBuyDiff > 0) {\r\n         lastSoldDiff = currentSoldDiff;\r\n         lastBuyDiff = currentBuyDiff;\r\n         lastAction = 'buy';\r\n\r\n         pieces = currentMoney / price;\r\n         currentMoney = 0;\r\n         transactionCount++;\r\n         // console.log(`BUY :>> ${label} (pieces: ${pieces} / price: ${price})`);\r\n      }\r\n      // console.log('lastSoldDiff :>> ', lastSoldDiff);\r\n      // console.log('currentSoldDiff :>> ', currentSoldDiff);\r\n\r\n      if (lastAction === 'buy' && lastSoldDiff > 0 && currentSoldDiff <= 0) {\r\n         lastSoldDiff = currentSoldDiff;\r\n         lastBuyDiff = currentBuyDiff;\r\n         lastAction = 'sold';\r\n\r\n         currentMoney = price * pieces;\r\n         pieces = 0;\r\n         // console.log(`SOLD :>> ${label} (savings: ${currentMoney} / price: ${price})`);\r\n         transactionCount++;\r\n         lastSold = { savings: currentMoney, date: label, transactions: transactionCount };\r\n      }\r\n      counter++;\r\n   }\r\n   return lastSold;\r\n}\r\n",[],{"ruleId":"93","severity":1,"message":"94","line":4,"column":8,"nodeType":"95","messageId":"96","endLine":4,"endColumn":20},{"ruleId":"93","severity":1,"message":"97","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":29},{"ruleId":"93","severity":1,"message":"98","line":1,"column":7,"nodeType":"95","messageId":"96","endLine":1,"endColumn":14},{"ruleId":"99","severity":1,"message":"100","line":1,"column":25,"nodeType":"101","messageId":"102","endLine":1,"endColumn":34,"fix":"103"},{"ruleId":"99","severity":1,"message":"100","line":2,"column":20,"nodeType":"101","messageId":"102","endLine":2,"endColumn":24,"fix":"104"},{"ruleId":"99","severity":1,"message":"100","line":42,"column":16,"nodeType":"101","messageId":"102","endLine":42,"endColumn":30,"fix":"105"},{"ruleId":"99","severity":1,"message":"100","line":42,"column":32,"nodeType":"101","messageId":"102","endLine":42,"endColumn":39,"fix":"106"},{"ruleId":"93","severity":1,"message":"107","line":9,"column":8,"nodeType":"95","messageId":"96","endLine":9,"endColumn":15},{"ruleId":"93","severity":1,"message":"108","line":84,"column":7,"nodeType":"95","messageId":"96","endLine":84,"endColumn":13},{"ruleId":"93","severity":1,"message":"109","line":113,"column":11,"nodeType":"95","messageId":"96","endLine":113,"endColumn":16},{"ruleId":"110","severity":1,"message":"111","line":140,"column":4,"nodeType":"112","messageId":"113","endLine":140,"endColumn":15},{"ruleId":"110","severity":1,"message":"111","line":151,"column":4,"nodeType":"112","messageId":"113","endLine":151,"endColumn":15},{"ruleId":"110","severity":1,"message":"111","line":152,"column":4,"nodeType":"112","messageId":"113","endLine":152,"endColumn":15},{"ruleId":"110","severity":1,"message":"111","line":166,"column":30,"nodeType":"112","messageId":"113","endLine":166,"endColumn":41},{"ruleId":"110","severity":1,"message":"111","line":173,"column":13,"nodeType":"112","messageId":"113","endLine":173,"endColumn":24},{"ruleId":"110","severity":1,"message":"111","line":174,"column":13,"nodeType":"112","messageId":"113","endLine":174,"endColumn":24},{"ruleId":"110","severity":1,"message":"111","line":175,"column":13,"nodeType":"112","messageId":"113","endLine":175,"endColumn":24},{"ruleId":"110","severity":1,"message":"111","line":180,"column":13,"nodeType":"112","messageId":"113","endLine":180,"endColumn":24},{"ruleId":"110","severity":1,"message":"111","line":187,"column":13,"nodeType":"112","messageId":"113","endLine":187,"endColumn":24},{"ruleId":"110","severity":1,"message":"111","line":195,"column":4,"nodeType":"112","messageId":"113","endLine":195,"endColumn":15},{"ruleId":"110","severity":1,"message":"111","line":196,"column":4,"nodeType":"112","messageId":"113","endLine":196,"endColumn":15},{"ruleId":"93","severity":1,"message":"114","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":26},{"ruleId":"93","severity":1,"message":"115","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":14},{"ruleId":"93","severity":1,"message":"116","line":10,"column":8,"nodeType":"95","messageId":"96","endLine":10,"endColumn":22},{"ruleId":"93","severity":1,"message":"107","line":15,"column":8,"nodeType":"95","messageId":"96","endLine":15,"endColumn":15},{"ruleId":"93","severity":1,"message":"97","line":18,"column":8,"nodeType":"95","messageId":"96","endLine":18,"endColumn":29},{"ruleId":"93","severity":1,"message":"117","line":21,"column":10,"nodeType":"95","messageId":"96","endLine":21,"endColumn":28},{"ruleId":"93","severity":1,"message":"118","line":25,"column":7,"nodeType":"95","messageId":"96","endLine":25,"endColumn":14},{"ruleId":"93","severity":1,"message":"119","line":50,"column":7,"nodeType":"95","messageId":"96","endLine":50,"endColumn":17},{"ruleId":"93","severity":1,"message":"120","line":118,"column":10,"nodeType":"95","messageId":"96","endLine":118,"endColumn":35},{"ruleId":"93","severity":1,"message":"108","line":123,"column":7,"nodeType":"95","messageId":"96","endLine":123,"endColumn":13},{"ruleId":"93","severity":1,"message":"121","line":149,"column":10,"nodeType":"95","messageId":"96","endLine":149,"endColumn":19},{"ruleId":"93","severity":1,"message":"122","line":157,"column":7,"nodeType":"95","messageId":"96","endLine":157,"endColumn":15},{"ruleId":"93","severity":1,"message":"123","line":158,"column":7,"nodeType":"95","messageId":"96","endLine":158,"endColumn":15},{"ruleId":"110","severity":1,"message":"111","line":204,"column":10,"nodeType":"112","messageId":"113","endLine":204,"endColumn":21},{"ruleId":"93","severity":1,"message":"124","line":339,"column":10,"nodeType":"95","messageId":"96","endLine":339,"endColumn":19},{"ruleId":"93","severity":1,"message":"125","line":342,"column":12,"nodeType":"95","messageId":"96","endLine":342,"endColumn":19},{"ruleId":"93","severity":1,"message":"126","line":342,"column":38,"nodeType":"95","messageId":"96","endLine":342,"endColumn":50},{"ruleId":"93","severity":1,"message":"127","line":346,"column":25,"nodeType":"95","messageId":"96","endLine":346,"endColumn":33},{"ruleId":"93","severity":1,"message":"128","line":67,"column":28,"nodeType":"95","messageId":"96","endLine":67,"endColumn":33},{"ruleId":"93","severity":1,"message":"129","line":72,"column":27,"nodeType":"95","messageId":"96","endLine":72,"endColumn":31},{"ruleId":"110","severity":1,"message":"111","line":80,"column":4,"nodeType":"112","messageId":"113","endLine":80,"endColumn":15},{"ruleId":"110","severity":1,"message":"111","line":82,"column":4,"nodeType":"112","messageId":"113","endLine":82,"endColumn":15},{"ruleId":"93","severity":1,"message":"130","line":180,"column":7,"nodeType":"95","messageId":"96","endLine":180,"endColumn":14},{"ruleId":"93","severity":1,"message":"128","line":74,"column":28,"nodeType":"95","messageId":"96","endLine":74,"endColumn":33},{"ruleId":"93","severity":1,"message":"129","line":79,"column":27,"nodeType":"95","messageId":"96","endLine":79,"endColumn":31},{"ruleId":"93","severity":1,"message":"130","line":166,"column":7,"nodeType":"95","messageId":"96","endLine":166,"endColumn":14},"no-unused-vars","'DekaEtfChart' is defined but never used.","Identifier","unusedVar","'CryptoParamEvaluation' is defined but never used.","'unirest' is assigned a value but never used.","quotes","Strings must use singlequote.","Literal","wrongQuotes",{"range":"131","text":"132"},{"range":"133","text":"134"},{"range":"135","text":"136"},{"range":"137","text":"138"},"'roundTo' is defined but never used.","'colors' is assigned a value but never used.","'label' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'useEffect' is defined but never used.","'Line' is defined but never used.","'BootstrapTable' is defined but never used.","'addHiddenKeyColumn' is defined but never used.","'columns' is assigned a value but never used.","'getOptions' is assigned a value but never used.","'getOptionsWithAnnotations' is defined but never used.","'getLabels' is defined but never used.","'LINE_200' is assigned a value but never used.","'LINE_100' is assigned a value but never used.","'getResult' is defined but never used.","'savings' is assigned a value but never used.","'transactions' is assigned a value but never used.","'lastSold' is assigned a value but never used.","'lineX' is assigned a value but never used.","'date' is assigned a value but never used.","'counter' is assigned a value but never used.",[24,33],"'unirest'",[56,60],"'fs'",[1084,1098],"'history.json'",[1100,1107],"'utf-8'"]